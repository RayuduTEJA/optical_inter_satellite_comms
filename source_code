import numpy as np
import matplotlib.pyplot as plt
from scipy.special import erfc

# Constants
lambda_val = 1550e-9  # Wavelength (m)
D_tx = 0.1          # Transmitter diameter (m)
D_rx = 0.2          # Receiver diameter (m)
eta_tx = 0.8        # Transmitter efficiency
eta_rx = 0.8        # Receiver efficiency
R = 0.8             # Detector responsivity (A/W)
N0 = 1e-15          # Noise power spectral density (W/Hz)
B = 1e9             # Bandwidth (Hz)

# Fixed distances (m)
distances = np.array([200e3, 400e3, 600e3, 800e3, 1000e3])

# 1. Characterise Optical Beam
def beam_divergence(lambda_val, D_tx):
    return (4 * lambda_val) / (np.pi * D_tx)

def beam_radius(lambda_val, L, D_tx):
    return (2 * lambda_val * L) / (np.pi * D_tx)

def beam_area(lambda_val, L, D_tx):
    w_L = beam_radius(lambda_val, L, D_tx)
    return np.pi * w_L**2

# 2. Characterise the Channel
def free_space_path_loss(lambda_val, L, D_tx, D_rx):
    return (np.pi**2 * D_rx**2 * D_tx**2) / (16 * lambda_val**2 * L**2)

# 3. Power Analysis
tx_powers = np.arange(0.1, 1.01, 0.01)  # 100 mW to 1 W in 10 mW steps
received_powers = {}

plt.figure(figsize=(10, 6))
for L in distances:
    fspl = free_space_path_loss(lambda_val, L, D_tx, D_rx)
    rx_power = tx_powers * fspl * eta_tx * eta_rx
    received_powers[L] = rx_power * 1e3  # Convert to mW for plotting
    plt.plot(tx_powers * 1e3, received_powers[L], label=f'Distance = {L/1e3} km')

plt.xlabel('Transmitted Output Power (mW)')
plt.ylabel('Received Input Power (mW)')
plt.title('Transmitted vs Received Power for Different Distances')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig('power_analysis.png')
plt.close()

# 4. BER vs SNR for OOK Modulation
tx_power_fixed = 0.2  # 200 mW
snr_db_range = np.arange(-2, 7.1, 0.5)
snr_linear_range = 10**(snr_db_range / 10)
ber_values = {}

plt.figure(figsize=(10, 6))
for L in distances:
    fspl = free_space_path_loss(lambda_val, L, D_tx, D_rx)
    rx_power = tx_power_fixed * fspl * eta_tx * eta_rx
    electrical_signal_power = (R * rx_power)**2
    noise_power = N0 * B
    snr_calculated = electrical_signal_power / noise_power
    ber = 0.5 * erfc(np.sqrt(snr_linear_range) / 2)
    ber_values[L] = ber
    plt.plot(snr_db_range, ber, label=f'Distance = {L/1e3} km')

plt.xlabel('Signal-to-Noise Ratio (dB)')
plt.ylabel('Bit Error Rate (BER)')
plt.title(f'BER vs SNR for OOK (Tx Power = {tx_power_fixed*1e3} mW)')
plt.yscale('log')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig('ber_vs_snr.png')
plt.close()

print("Plots 'power_analysis.png' and 'ber_vs_snr.png' have been generated.")
